function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var L = _interopDefault(require('leaflet'));

var t=Math.sqrt(Number.EPSILON);function n(t,a,n){return (n/60+a)/60+t}function M(t){return 180*t/Math.PI}function r(t){return t*Math.PI/180}function e(t,a){return {apply:function(n){var h=n[0],M=n[1],r=n.slice(2);return [h+t,M+a].concat(r)},unapply:function(n){var h=n[0],M=n[1],r=n.slice(2);return [h-t,M-a].concat(r)}}}var f=e(26e5,12e5),v=f.apply,l=f.unapply;var P=674.374,g=15.056,q=405.346;function y(a,n){var h=1/n,o=2*h-Math.pow(h,2);return {fromCartesian:function(n){for(var h,r,s,e=n[0],i=n[1],c=n[2],u=Math.atan(i/e),p=Math.sqrt(Math.pow(e,2)+Math.pow(i,2)),f=Math.atan(c/((1-o)*p));!(Math.abs(r-h)<t);)h=r,r=a/Math.sqrt(1-o*Math.pow(Math.sin(f),2)),s=p/Math.cos(f)-r,f=Math.atan(c/((1-o*r/(r+s))*p));var v=M(f);return [M(u),v,s]},toCartesian:function(t){var n=t[0],h=t[2];void 0===h&&(h=0);var M=r(t[1]),s=r(n),e=a/Math.sqrt(1-o*Math.pow(Math.sin(M),2));return [(e+h)*Math.cos(M)*Math.cos(s),(e+h)*Math.cos(M)*Math.sin(s),(e*(1-o)+h)*Math.sin(M)]}}}var C=6377397.155,m=6356078.96282,x=y(C,299.15281282542253),b=x.fromCartesian,d=x.toCartesian,N=y(6378137,298.257223563),E=N.fromCartesian,L$1=N.toCartesian,O=C,S=(O-m)/O,k=r(n(46,57,8.66)),z=r(n(7,26,22.5)),A=2*S-Math.pow(S,2),B=O*Math.sqrt(1-A)/(1-A*Math.pow(Math.sin(k),2)),D=Math.sqrt(1+A/(1-A)*Math.pow(Math.cos(k),4)),F=Math.asin(Math.sin(k)/D),G=Math.sqrt(A),H=Math.log(Math.tan(Math.PI/4+F/2))-D*Math.log(Math.tan(Math.PI/4+k/2))+D*G/2*Math.log((1+G*Math.sin(k))/(1-G*Math.sin(k)));function J(t){var a,n=L$1(t),h=[(a=n)[0]-P,a[1]-g,a[2]-q],M=b(h),o=function(t){var a=t[0],n=r(t[1]),h=r(a),M=D*Math.log(Math.tan(Math.PI/4+n/2))-D*G/2*Math.log((1+G*Math.sin(n))/(1-G*Math.sin(n)))+H,o=2*(Math.atan(Math.exp(M))-Math.PI/4),s=D*(h-z),e=Math.asin(Math.cos(F)*Math.sin(o)-Math.sin(F)*Math.cos(o)*Math.cos(s)),i=Math.atan(Math.sin(s)/(Math.sin(F)*Math.tan(o)+Math.cos(F)*Math.cos(s)));return [B*i,B/2*Math.log((1+Math.sin(e))/(1-Math.sin(e)))]}(M);return t.length>2?o.concat([M[2]]):o}function K(a){var n=function(a){for(var n,h,r=a[0],o=2*(Math.atan(Math.exp(a[1]/B))-Math.PI/4),s=r/B,e=Math.asin(Math.cos(F)*Math.sin(o)+Math.sin(F)*Math.cos(o)*Math.cos(s)),i=Math.atan(Math.sin(s)/(Math.cos(F)*Math.cos(s)-Math.sin(F)*Math.tan(o))),c=z+i/D,u=e;!(Math.abs(h-n)<t);)n=h,h=(Math.log(Math.tan(Math.PI/4+e/2))-H)/D+G*Math.log(Math.tan(Math.PI/4+Math.asin(G*Math.sin(u))/2)),u=2*Math.atan(Math.exp(h))-Math.PI/2;var p=M(u);return [M(c),p]}(a);n.push(a[2]);var h,r=d(n),o=[(h=r)[0]+P,h[1]+g,h[2]+q],s=E(o);return a.length>2?s:s.slice(0,2)}function R(t){return v(J(t))}function T(t){return K(l(t))}var U={project:R,unproject:T};

var Projection = {
  bounds: L.bounds(L.point(2420000, 1030000), L.point(2900000, 1350000)),
  project: function (ref) {
    var lng = ref.lng;
    var lat = ref.lat;

    var ref$1 = U.project([lng, lat]);
    var E = ref$1[0];
    var N = ref$1[1];
    return L.point(E, N);
  },
  unproject: function (ref) {
    var E = ref.x;
    var N = ref.y;

    var ref$1 = U.unproject([E, N]);
    var lng = ref$1[0];
    var lat = ref$1[1];
    return L.latLng(lat, lng);
  }
};
var CRS = L.Class.extend({
  includes: L.CRS,
  options: {
    transformation: new L.Transformation(1, 0, -1, 0)
  },

  initialize: function initialize(options) {
    this.projection = Projection;
    L.setOptions(this, options);

    if (this.options.origin) {
      this.transformation = new L.Transformation(1, -this.options.origin[0], -1, this.options.origin[1]);
    }

    if (this.options.scales) {
      this._scales = this.options.scales;
    } else if (this.options.resolutions) {
      this._scales = [];

      for (var i = this.options.resolutions.length - 1; i >= 0; i--) {
        if (this.options.resolutions[i]) {
          this._scales[i] = 1 / this.options.resolutions[i];
        }
      }
    }

    this.infinite = !this.options.bounds;
  },

  scale: function scale(zoom) {
    var iZoom = Math.floor(zoom);

    if (zoom === iZoom) {
      return this._scales[zoom];
    } // Non-integer zoom, interpolate


    var baseScale = this._scales[iZoom];
    var nextScale = this._scales[iZoom + 1];
    var scaleDiff = nextScale - baseScale;
    var zDiff = zoom - iZoom;
    return baseScale + scaleDiff * zDiff;
  },

  zoom: function zoom(scale) {
    // Find closest number in this._scales, down
    var downScale = this._closestElement(this._scales, scale);

    var downZoom = this._scales.indexOf(downScale); // Check if scale is downScale => return array index


    if (scale === downScale) {
      return downZoom;
    }

    if (downScale === undefined) {
      return -Infinity;
    } // Interpolate


    var nextZoom = downZoom + 1;
    var nextScale = this._scales[nextZoom];

    if (nextScale === undefined) {
      return Infinity;
    }

    var scaleDiff = nextScale - downScale;
    return (scale - downScale) / scaleDiff + downZoom;
  },

  distance: L.CRS.Earth.distance,
  R: L.CRS.Earth.R,

  /* Get the closest lowest element in an array */
  _closestElement: function _closestElement(array, element) {
    var low;

    for (var i = array.length; i--;) {
      if (array[i] <= element && (low === undefined || low < array[i])) {
        low = array[i];
      }
    }

    return low;
  }

}); // Available resolutions
// Source: https://api3.geo.admin.ch/services/sdiservices.html#wmts

var resolutions = [4000, 3750, 3500, 3250, 3000, 2750, 2500, 2250, 2000, 1750, 1500, 1250, 1000, 750, 650, 500, 250, 100, 50, 20, 10, 5, 2.5, 2, 1.5, 1, 0.5, 0.25, 0.1];

function makeCrs(options) {
  var bounds = L.bounds(options.min, options.max);
  var origin = [options.min.x, options.max.y];
  return new CRS({
    bounds: bounds,
    origin: origin,
    resolutions: resolutions
  });
}

var EPSG_2056 = makeCrs({
  // Bounding box for tiles in EPSG:2056
  // Source: https://wmts.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml
  min: L.point(2420000, 1030000),
  max: L.point(2900000, 1350000)
});

var project2056 = function (latLng) { return EPSG_2056.projection.project(latLng); };

var unproject2056 = function (point) { return EPSG_2056.projection.unproject(point); };
/*
const EPSG_21781 = makeCrs({
  // Bounding box for tiles in EPSG:21781
  // Source: https://wmts.geo.admin.ch/EPSG/21781/1.0.0/WMTSCapabilities.xml
  min: L.point(420000, 30000),
  max: L.point(900000, 350000),
});
const project21781 = latLng => EPSG_21781.projection.project(latLng);
const unproject21781 = point => EPSG_21781.projection.unproject(point);
*/


var latLngBounds = L.latLngBounds(unproject2056(EPSG_2056.options.bounds.min), unproject2056(EPSG_2056.options.bounds.max));
var URLS = {
  'EPSG:2056': 'https://wmts{s}.geo.admin.ch/1.0.0/{layer}/default/{timestamp}/2056/{z}/{x}/{y}.{format}',
  'EPSG:21781': 'https://wmts{s}.geo.admin.ch/1.0.0/{layer}/default/{timestamp}/21781/{z}/{y}/{x}.{format}'
};
var Swiss = L.TileLayer.extend({
  options: {
    attribution: '<a href="https://www.swisstopo.admin.ch/en/home.html" target="_blank">swisstopo</a>',
    bounds: latLngBounds,
    crs: EPSG_2056,
    format: 'jpeg',
    layer: 'ch.swisstopo.pixelkarte-farbe',
    maxZoom: 27,
    minZoom: 0,
    subdomains: '0123456789',
    timestamp: 'current'
  },

  initialize: function initialize(options) {
    L.setOptions(this, options);
    var url = URLS['EPSG:2056'];
    L.TileLayer.prototype.initialize.call(this, url, this.options);
  }

});
Swiss.latLngBounds = latLngBounds;
Swiss.EPSG_2056 = EPSG_2056;
Swiss.project_2056 = project2056;
Swiss.unproject_2056 = unproject2056;
/*
Swiss.EPSG_21781 = EPSG_21781;
Swiss.project_21781 = project21781;
Swiss.unproject_21781 = unproject21781;
*/

L.tileLayer.swiss = function (options) { return new Swiss(options); };

module.exports = Swiss;
//# sourceMappingURL=Leaflet.TileLayer.Swiss.js.map
